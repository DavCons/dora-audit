supabase functions download request-magic-link
Deno.serve(async (req)=>{
  try {
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({
        error: 'Method not allowed'
      }), {
        status: 405,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    const contentType = req.headers.get('content-type') || '';
    if (!contentType.includes('application/json')) {
      return new Response(JSON.stringify({
        error: 'Expected application/json'
      }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    // Verify EDGE_FUNCTION_TOKEN
    const expectedToken = Deno.env.get('EDGE_FUNCTION_TOKEN') || '';
    const authHeader = req.headers.get('authorization') || '';
    const provided = authHeader.startsWith('Bearer ') ? authHeader.slice(7) : '';
    if (!expectedToken || provided !== expectedToken) {
      return new Response(JSON.stringify({
        error: 'Unauthorized'
      }), {
        status: 401,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    const body = await req.json();
    const email = (body.email || '').trim();
    const redirect_to = body.redirect_to ? String(body.redirect_to) : undefined;
    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return new Response(JSON.stringify({
        error: 'Invalid email'
      }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const KEY = Deno.env.get('SUPABASE_ANON_KEY');
    if (!SUPABASE_URL || !KEY) {
      return new Response(JSON.stringify({
        error: 'Server misconfiguration'
      }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    const payload = {
      email
    };
    if (redirect_to) payload.redirect_to = redirect_to;
    const resp = await fetch(`${SUPABASE_URL}/auth/v1/otp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${KEY}`,
        apikey: KEY
      },
      body: JSON.stringify(payload)
    });
    const data = await resp.json().catch(()=>null);
    if (!resp.ok) {
      return new Response(JSON.stringify({
        error: data?.error || 'Failed to request magic link',
        details: data
      }), {
        status: resp.status,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    return new Response(JSON.stringify({
      success: true,
      details: data
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } catch (err) {
    console.error(err);
    return new Response(JSON.stringify({
      error: 'Internal server error'
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
});

